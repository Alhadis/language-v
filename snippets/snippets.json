{
	".source.v": {
		"snippet.flag": {
			"prefix": "fl",
			"body": "#flag ${1:-flag}",
			"description": "Code snippet for '#flag'"
		},
		"snippet.include": {
			"prefix": "inc",
			"body": "#include <${1:name}>",
			"description": "Code snippet for C '#include'"
		},
		"snippet.module": {
			"prefix": "mod",
			"body": "module ${1:name}",
			"description": "Code snippet for 'module'"
		},
		"snippet.import": {
			"prefix": "imp",
			"body": "import ${1:module}",
			"description": "Code snippet for 'import' module"
		},
		"snippet.go": {
			"prefix": "go",
			"body": "go ${1:function}($0)",
			"description": "Code snippet for concurrency 'go'"
		},
		"snippet.goto": {
			"prefix": "got",
			"body": "goto ${1:label}",
			"description": "Code snippet for 'goto' label"
		},
		"snippet.defer": {
			"prefix": "def",
			"body": "defer ${1:function}($0)",
			"description": "Code snippet for 'defer' function"
		},
		"snippet.function": {
			"prefix": "fn",
			"body": "fn ${1:name}() {\n\t$0\n}",
			"description": "Code snippet for function 'fn'"
		},
		"snippet.public.function": {
			"prefix": "pub",
			"body": "pub fn ${1:name}() {\n\t$0\n}",
			"description": "Code snippet for public function 'pub fn'"
		},
		"snippet.for": {
			"prefix": "for",
			"body": "for {\n\t$0\n}",
			"description": "Code snippet for pure infinity loop 'for'"
		},
		"snippet.for.index": {
			"prefix": "for",
			"body": "for ${1:i} := 0; $1 < ${3:count}; $1++ {\n\t$0\n}",
			"description": "Code snippet for index loop 'for'"
		},
		"snippet.foreach": {
			"prefix": "fore",
			"body": "for ${1:variable} in ${2:array} {\n\t$0\n}",
			"description": "Code snippet for foreach 'for'"
		},
		"snippet.foreach.index": {
			"prefix": "fore",
			"body": "for ${1:_}, ${2:variable} in ${3:array} {\n\t$0\n}",
			"description": "Code snippet for index based loop 'for'"
		},
		"snippet.switch": {
			"prefix": "sw",
			"body": "switch ${1:expression} {\n\t$0\n}",
			"description": "Code snippet for 'switch' statement"
		},
		"snippet.break": {
			"prefix": "br",
			"body": "break$0",
			"description": "Code snippet for 'break'"
		},
		"snippet.continue": {
			"prefix": "con",
			"body": "continue$0",
			"description": "Code snippet for 'continue'"
		},
		"snippet.if": {
			"prefix": "if",
			"body": "if ${1:expression} {\n\t$0\n}",
			"description": "Code snippet for 'if' statement"
		},
		"snippet.elseif": {
			"prefix": "elf",
			"body": "else if ${1:expression} {\n\t$0\n}",
			"description": "Code snippet for 'else if' statement"
		},
		"snippet.else": {
			"prefix": "el",
			"body": "else {\n\t$0\n}",
			"description": "Code snippet for 'else' statement"
		},
		"snippet.ifelse": {
			"prefix": "ie",
			"body": "if ${1:expression} {\n\t$0\n} else {\n\t$0\n}",
			"description": "Code snippet for 'if-else' statement"
		},
		"snippet.type": {
			"prefix": "ty",
			"body": "type ${1:name} ${2:type}",
			"description": "Code snippet for 'type' definition"
		},
		"snippet.struct": {
			"prefix": "stru",
			"body": "struct ${1:name} {\n\t$0\n}",
			"description": "Code snippet for 'struct'"
		},
		"snippet.interface": {
			"prefix": "inte",
			"body": "interface ${1:name} {$0}",
			"description": "Code snippet for 'interface'"
		},
		"snippet.enum": {
			"prefix": "en",
			"body": "enum ${1:name} {\n\t$0\n}",
			"description": "Code snippet for 'enum'"
		},
		"snippet.const": {
			"prefix": "co",
			"body": "const ${1:name} = ${2:value}",
			"description": "Code snippet for 'const'"
		},
		"snippet.const.multiply": {
			"prefix": "cons",
			"body": "const (\n\t$0\n)",
			"description": "Code snippet for multiply 'const'"
		},
		"snippet.map": {
			"prefix": "map",
			"body": "map[${1:key}]${2:value}{$0}",
			"description": "Code snippet for 'map'"
		},
		"snippet.assert": {
			"prefix": "as",
			"body": "assert ${1:expression}",
			"description": "Code snippet for testing 'assert'"
		},
		"snippet.if.compile": {
			"prefix": "$i",
			"body": "\\$if ${1:expression} {\n\t$0\n}",
			"description": "Code snippet for compile time 'if'"
		},
		"snippet.fn.print": {
			"prefix": "pr",
			"body": "print('${1:text}')",
			"description": "Code snippet for standart based function 'print'"
		},
		"snippet.fn.eprint": {
			"prefix": "epr",
			"body": "eprint('${1:text}')",
			"description": "Code snippet for standart based function 'eprint'"
		},
		"snippet.fn.println": {
			"prefix": "prl",
			"body": "println('${1:text}')",
			"description": "Code snippet for standart based function 'println'"
		},
		"snippet.fn.eprintln": {
			"prefix": "eprl",
			"body": "eprintln('${1:text}')",
			"description": "Code snippet for standart based function 'eprintln'"
		},
		"snippet.fn.main": {
			"prefix": "fmain",
			"body": "fn main() {\n\t$0\n}",
			"description": "Code snippet for 'main' function"
		},
		"snippet.fn.init": {
			"prefix": "finit",
			"body": "fn init() {\n\t$0\n}",
			"description": "Code snippet for 'init' function"
		}
	}
}
